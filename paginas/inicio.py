import streamlit as st
import pandas as pd
from datetime import datetime
from drive import get_sheet_from_drive, get_data_from_drive
from datahandlers.abono import trata_abono_2sys
from datahandlers.servidor import trata_servidor_2sys
import config

########################################
# LAYOUT CONFIG
########################################

st.set_page_config(layout = 'wide')

########################################
# FUN√á√ïES
########################################

## Fun√ß√£o para criar ranges de dias de afastamento
def append_dias_afast(lista, dia1, diau, motivo, matricula):
    if not (pd.isnull(dia1) or pd.isnull(diau)):
        date_range = pd.period_range(start=dia1, end=diau)
        for single_date in date_range:
            lista.append({'Matr√≠cula': matricula, 'Dia': single_date, 'Motivo': motivo})


# Importa√ß√£o e tratamento de dados do google sheets
def import_data():
    
    dados = {}

    # Extrai os dados

    sheet = get_sheet_from_drive()

    ## Carrega abono
    df = get_data_from_drive(sheet, 'abono')
    dados['abono'] = trata_abono_2sys(df)

    ## carrega servidores
    df = pd.read_csv(config.URL_SERVIDORES_NOMEADOS)
    dados['servidores'] = trata_servidor_2sys(df)

    ## carrega hist√≥rico de servidores
    df = pd.read_csv(config.URL_SERVIDORES_HISTORICO)
    dados['historico'] = trata_servidor_2sys(df)

    ## carrega outros afastamentos
    dados['afastamentos'] = pd.read_csv(config.URL_AFASTAMENTOS_NOVO) # ["Carimbo de data/hora", "Matr√≠cula SSP", "Primeiro dia de afastamento", '√öltimo dia de afastamento", "Tipo de afastamento", "Processo SEI"]
    dados['afastamentos']['Primeiro dia de afastamento'] = pd.to_datetime(dados['afastamentos']['Primeiro dia de afastamento'], dayfirst=True).dt.date
    dados['afastamentos']['√öltimo dia de afastamento'] = pd.to_datetime(dados['afastamentos']['√öltimo dia de afastamento'], dayfirst=True).dt.date   
    
    ## carrega f√©rias   
    dados['ferias'] = pd.read_csv(config.URL_FERIAS) # ["Chave", "Carimbo de data/hora", "Matr√≠cula SSP", "Exerc√≠cio", "1¬∫ Per√≠odo - in√≠cio", "1¬∫ Per√≠odo - √∫ltimo dia", "2¬∫ Per√≠odo - in√≠cio", "2¬∫ Per√≠odo - √∫ltimo dia", '3¬∫ Per√≠odo - in√≠cio", "3¬∫ Per√≠odo - √∫ltimo dia", "SEI"]
    dados['ferias']['1¬∫ Per√≠odo - in√≠cio']      = pd.to_datetime(dados['ferias']['1¬∫ Per√≠odo - in√≠cio'], dayfirst=True).dt.date
    dados['ferias']['1¬∫ Per√≠odo - √∫ltimo dia']  = pd.to_datetime(dados['ferias']['1¬∫ Per√≠odo - √∫ltimo dia'], dayfirst=True).dt.date
    dados['ferias']['2¬∫ Per√≠odo - in√≠cio']      = pd.to_datetime(dados['ferias']['2¬∫ Per√≠odo - in√≠cio'], dayfirst=True).dt.date
    dados['ferias']['2¬∫ Per√≠odo - √∫ltimo dia']  = pd.to_datetime(dados['ferias']['2¬∫ Per√≠odo - √∫ltimo dia'], dayfirst=True).dt.date
    dados['ferias']['3¬∫ Per√≠odo - in√≠cio']      = pd.to_datetime(dados['ferias']['3¬∫ Per√≠odo - in√≠cio'], dayfirst=True).dt.date
    dados['ferias']['3¬∫ Per√≠odo - √∫ltimo dia']  = pd.to_datetime(dados['ferias']['3¬∫ Per√≠odo - √∫ltimo dia'], dayfirst=True).dt.date
    dados['ferias']['Chave']                    = dados['ferias']['Chave'].astype('int32')
    
    ## carrega cargos  
    dados['cargos'] = pd.read_csv(config.URL_CARGOS) # ["ID", "CARGO EM COMISS√ÉO", "Cargo", "Setor", "SIGRH - FUN√á√ÉO (DEC 46.117)", "Gratifica√ß√£o", "NC_padronizado", "Seq", "Ocupante"]
    
    ## carrega gratifica√ß√µes
    dados['gratificacao'] = pd.read_csv(config.URL_GRATIFICACAO) # ["Gratifica√ß√£o", "Sal√°rio"]
    
    ## carrega nomea√ß√µes invalidas
    dados['nom_invalid'] = pd.read_csv(config.URL_NOM_INVALID) # ['Matr√≠cula SSP','Cargo','GRATIFICA√á√ÉO', 'SETOR', 'Data de nomea√ß√£o', 'Data_min_exon']
    dados['servidores_inv'] = dados['historico'][dados['historico']["Matr√≠cula na SSP"].isin(dados['nom_invalid']['Matr√≠cula SSP'])]

    ## integra servidores nomeados + historico
    dados['serv_total'] = pd.concat([dados['servidores'], dados['servidores_inv']], ignore_index = True)
    dados['serv_total'] = dados['serv_total'][~dados['serv_total']['Matr√≠cula na SSP'].duplicated(keep='first')]
    
    ## gera df de servidores inv√°lidos
    matriculas_to_drop = dados['servidores']['Matr√≠cula na SSP']
    dados['servidores_inv'] = dados['serv_total'][~dados['serv_total']['Matr√≠cula na SSP'].isin(matriculas_to_drop)]


    # Gera DF de dias com afastamento
    ## Formato: Matricula, Dia afastado, Motivo

    ## Afastamentos gerais
    lista_afast = []
    for _, row in dados['afastamentos'].iterrows():
        append_dias_afast(lista_afast, row['Primeiro dia de afastamento'], row['√öltimo dia de afastamento'], row['Tipo de afastamento'], row['Matr√≠cula SSP'])

    ## F√©rias
    for _, row in dados['ferias'].iterrows():
        append_dias_afast(lista_afast, row['1¬∫ Per√≠odo - in√≠cio'], row['1¬∫ Per√≠odo - √∫ltimo dia'], 'F√©rias', row['Matr√≠cula SSP'])
        append_dias_afast(lista_afast, row['2¬∫ Per√≠odo - in√≠cio'], row['2¬∫ Per√≠odo - √∫ltimo dia'], 'F√©rias', row['Matr√≠cula SSP'])
        append_dias_afast(lista_afast, row['3¬∫ Per√≠odo - in√≠cio'], row['3¬∫ Per√≠odo - √∫ltimo dia'], 'F√©rias', row['Matr√≠cula SSP'])
        
    ## Abono anual
    cols = ['1¬∫ dia', '2¬∫ dia', '3¬∫ dia', '4¬∫ dia', '5¬∫ dia']
    for _, row in dados['abono'].iterrows():
        for dia in cols:
            if not pd.isna(row[dia]):
                lista_afast.append({'Matr√≠cula': row['Matr√≠cula SSP'], 'Dia': row[dia].strftime("%Y-%m-%d"), 'Motivo': 'Abono anual'})
        
    ## Totaliza√ß√£o
    dados['dias_afastamento'] = pd.DataFrame(lista_afast)
    dados['dias_afastamento']['Dia'] = pd.to_datetime(dados['dias_afastamento']['Dia'], format="%Y-%m-%d").dt.date

    return dados


######################################## 
# SIDE BAR
########################################

st.sidebar.markdown("D√∫vidas? Tratar com TC Beckmann")

########################################
# INTERFACE
########################################   

# Carregando dados
with st.spinner("Carregando dados..."):
    if "data" not in st.session_state:
        dados = import_data()
        st.session_state['data'] = dados
        st.success("Dados carregados!")

# Interface final
st.markdown("# CONTROLE DE SERVIDORES DA SUDEC üë®‚Äçüë¶‚Äçüë¶")

st.link_button("Caso tenha acesso, acesse a planilha completa no Google", "https://docs.google.com/spreadsheets/d/1eQ5PXgKFeKUFibGWYWA3QzKGFB9HUNHguO2Cixtypt4/edit?gid=0#gid=0")

if st.button("Atualizar dados"):
    st.write('Solicita√ß√£o de atualiza√ß√£o feita. Aguarde.')
    dados = import_data()
    st.session_state['data'] = dados
    st.write('Dados Atualizados!')

    st.sidebar.markdown("Dados atualizados em")
    st.sidebar.markdown(f"{datetime.now().strftime("%Y-%m-%d %H:%M:%S")}")



